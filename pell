#!/bin/sh
# -*- mode: scheme -*-
exec /usr/bin/env scsh -o posix-platform-names -e main -s "$0" "$@"
!#

;;; doublequote items in a list
;;; (quote-list '(foo bar baz) => '("foo" "bar" "baz")
(define (quote-list list)
  (map (lambda (item)
         (string-append
          (cond ((number? item) (number->string item))
                ((symbol? item) (symbol->string item))
                ((string? item) item))
          ""))
       list))

;;; join strings in a list
;;; (strings-join '("foo" "bar" "baz") => "foobarbaz"
(define (strings-join list)
  (cond ((null? list) "")
        (else (string-append
               (car list)
               (if (null? (cdr list))
                   "" " ")
               (strings-join (cdr list))))))

;;; variables that control whether or not to echo command
;;; before executing
(define *print-run* #f)

;;; print command to execute then execute command
(define (print-run command . quiet)
      (let* ((form (strings-join (quote-list command))))
        (if (or (not *print-run*)
                (and (= (length quiet) 1)
                     (eq? (car quiet) #t)))
            #f
            (format #t "~A~%" form))
        (run (,@command))))

;;; help knob
(define *help* #f)

;;; print to stdout command usage
(define (display-usage args)
  (let ((self (file-name-nondirectory (car args))))
    (format #t
            "Usage: ~A [OPTIONS] HOST

OPTIONS:
-h, --help              Show this help
-i, --interval          Ping interval. Default: ~A seconds
-s, --silent            Disable audio notification
-n, --no-notify         Disable visual notifications
-N, --notify-timeout    Notification timeout in seconds. Default: ~A seconds

See https://github.com/ebzzry/pell for more information
" self *interval* *notify-timeout*)))

;;; ping interval
(define *interval* 60)

;;; audio notification knob
(define *silent* #f)

;;; visual notification knob
(define *notify* #f)

;;; visual notification timeout knob
(define *notify-timeout* 5000)

;;; primary notification audio file
(define *notification-file*
  "/usr/share/pell/notification.mp3")

;;; alternate notification audio file
(define *notification-file-alternate*
  (string-append (home-dir) "/.pell/notification.mp3"))

;;; procedure to parse command line input
(define (parse-arguments args)
  (cond ((null? args) args)
        ((string= (car args) "-i")
         (set! *interval* (cadr args))
         (parse-arguments (cddr args)))
        (else (case (string->symbol (car args))
                ((-h --help)
                 (set! *help* #t)
                 (parse-arguments (cdr args)))
                ((-s --silent --no-beep)
                 (set! *silent* #t)
                 (parse-arguments (cdr args)))
                ((-n --notify)
                 (set! *notify* #t)
                 (parse-arguments (cdr args)))
                ((-N --notify-timeout)
                 (set! *notify-timeout* (cadr args))
                 (parse-arguments (cdr args)))
                (else args)))))

;;; returns the interval value as number
(define (get-interval)
  (if (string? *interval*)
      (string->number *interval*)
      *interval*))

;;; pause ping interation
(define (sleep)
  (process-sleep (get-interval)))

;;; parse text from ping
(define (get-ping-reply host)
  (let ((os (os-name)))
    (run/strings
     (pipe ,(cond ((or (string=? "BSD" os) (string=? "Darwin" os))
                   `(ping -c 1 -Q ,host))
                  (else `(ping -c 1 ,host)))
           (grep "time=")
           (sed -e "s/^.*time=//;s/ *ms$//")))))

;;; get current date
(define (get-date)
  (car (run/strings (date "+%Y-%m-%d %H:%M:%S"))))

;;; select notification file from available sources
(define (select-notification-file)
  (cond ((file-exists? *notification-file*) *notification-file*)
        ((file-exists? *notification-file-alternate*) *notification-file-alternate*)
        (else #f)))

;;; play the notification audio file using sox's play
(define (play-notification-file)
  (let ((file (select-notification-file)))
    (if (not *silent*)
        (and file
             (run (play ,file)
                  (> 2 /dev/null))))))

;;; display a visual notification using libnotify
(define (notify-user host date pong)
  (let ((term (getenv "TERM")))
    (if (and *notify* (not (string=? term "cons25")))
        (run (notify-send -t ,*notify-timeout*
                          -u normal
                          ;; the unquoted -i has a different meaning in Scsh
                          "-i" gtk-dialog-info
                          ,(format #f "Ping reply from ~A" host)
                          ,(string-append date " " pong))))))

;;; ping target host, and handle rest periods
(define (ping-host host)
  (let ((output (get-ping-reply host))
        (date (get-date)))
    (if (not (null? output))
        (let ((pong (car output)))
          (format #t "~&~A ~A~%" date pong)
          (play-notification-file)
          (notify-user host date pong)
          (sleep)
          (ping-host host))
        (begin
          (format #t "~&~A~%" date)
          (sleep)
          (ping-host host)))))

;;; top-level
(define (main args)
  (if (not (null? (cdr args)))
      (let ((host (parse-arguments (cdr args))))
        (cond (*help*
               (display-usage args)
               (exit 0))
              (else
               (ping-host (car host)))))
      (display-usage args)))
